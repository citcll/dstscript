
In dstserver.sh line 129:
    [ "$cluster" != "无" ] && [ -d "$dst_base_dir/${cluster}" ] && shardarray=$(ls -l "$dst_base_dir/${cluster}" | grep ^d | awk '{print "$9}')
                                                                               ^-- SC2010: Don't use ls | grep. Use a glob or a for loop with a condition to allow non-alphanumeric filenames.


In dstserver.sh line 139:
            if [ $(grep 'is_master = true' -c "${dst_base_dir}/${cluster}/${shardm}/server.ini") -gt 0 ] 
                 ^-- SC2046: Quote this to prevent word splitting.


In dstserver.sh line 162:
        if [ $( ls -l "${dst_base_dir}/${cluster}" | grep -c ^d) -gt 0 ]
             ^-- SC2046: Quote this to prevent word splitting.
                ^-- SC2010: Don't use ls | grep. Use a glob or a for loop with a condition to allow non-alphanumeric filenames.


In dstserver.sh line 166:
            read mc
            ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 199:
        read clid
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 241:
    [ -d "$mod_cfg_dir" ] && rm -rf $mod_cfg_dir
                                    ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 252:
        read modid
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 291:
        c_name=$(echo $result | sed 's/#/ /g')
                 ^-- SC2001: See if you can use ${variable//search/replace} instead.
                      ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 297:
            cat "${mod_cfg_dir}/${moddir}.cfg" | grep -v "mod-configureable" | grep -v "mod-version" | grep -v "mod-name" | while read line
                ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.
                                                                                                                                  ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 304:
                    for ((i=5;i<${#ss[*]};i=$i+3))
                                            ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 316:
                value=$(echo "$value" | sed 's/#/ /g')
                        ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 317:
                label=$(echo "${ss[3]}" | sed 's/#/ /g')
                        ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 318:
                hover=$(echo "${ss[4]}" | sed 's/#/ /g')
                        ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 321:
                    label=$(echo "${ss[0]}" | sed 's/#/ /g')
                            ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 330:
                index=$(($index + 1))
                         ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 339:
                    read cmd
                    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 350:
                cmd=$(($cmd + 3))
                       ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 352:
                label=$(echo "${changelist[3]}" | sed 's/#/ /g')
                        ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 355:
                    label=$(echo "${changelist[0]}" | sed 's/#/ /g')
                            ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 368:
                    for ((i=5;i<${#changelist[*]};i=$i+3))
                                                    ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 370:
                        description=$(echo "${changelist[$[$i + 1]]}" | sed 's/#/ /g')
                                      ^-- SC2001: See if you can use ${variable//search/replace} instead.
                                                         ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 371:
                        hover=$(echo "${changelist[$[$i + 2]]}" | sed 's/#/ /g')
                                ^-- SC2001: See if you can use ${variable//search/replace} instead.
                                                   ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 374:
                        index=$((${index} + 1))
                                 ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 377:
                    read changelistindex
                    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 378:
                    listnum=$[${changelistindex} - 1]*3
                            ^-- SC2125: Brace expansions and globs are literal in assignments. Quote it or use an array.
                            ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 379:
                    changelist[1]=${changelist[$[$listnum + 5]]}
                                               ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 381:
                changestr="${changelist[@]}"
                          ^-- SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.


In dstserver.sh line 395:
    if [[ "$c_line -le 3" ]]
                  ^-- SC2157: Argument to implicit -n is always true due to literal strings.


In dstserver.sh line 402:
        cat "${mod_cfg_dir}/${moddir}.cfg"| grep -v "mod-configureable" | grep -v "mod-version" | grep -v "mod-name" | while read lc
            ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.
                                                                                                                             ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 405:
            cfgname=$(echo "${lcstr[0]}" | sed 's/#/ /g')
                      ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 425:
        echo "    }," >> "${data_dir}/modconfwrite.lua"
        ^-- SC2129: Consider using { cmd1; cmd2; } >> file instead of individual redirects.


In dstserver.sh line 443:
    cd "${data_dir}"
    ^-- SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.


In dstserver.sh line 456:
        cd "${data_dir}"
        ^-- SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.


In dstserver.sh line 458:
        cd "${HOME}"
        ^-- SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.


In dstserver.sh line 461:
        break
        ^-- SC2104: In functions, use return instead of break.


In dstserver.sh line 495:
    cd ${data_dir}
    ^-- SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.
       ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 497:
    cd ${HOME}
    ^-- SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.
       ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 507:
    for moddir in $(ls -F "${dst_server_dir}/mods" | grep "/$" | cut -d '/' -f1)
                    ^-- SC2010: Don't use ls | grep. Use a glob or a for loop with a condition to allow non-alphanumeric filenames.


In dstserver.sh line 509:
        if [ $(grep "${moddir}" -c "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua") -gt 0 ]
             ^-- SC2046: Quote this to prevent word splitting.


In dstserver.sh line 527:
    for moddir in $(grep "^  \[" "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua" | cut -d '"' -f2)
                  ^-- SC2013: To read lines rather than words, pipe/redirect to a 'while read' loop.


In dstserver.sh line 545:
        read modid
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 565:
            if [ $(grep "${moddir}" -c "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua") -gt 0 ]
                 ^-- SC2046: Quote this to prevent word splitting.


In dstserver.sh line 589:
        moddir=$(sed -n ${modid}p "${data_dir}/modconflist.lua" | cut -d ':' -f3)
                        ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 609:
                lastmodlinenum=$(cat "${data_dir}/modidlist.txt" | tail -n 1 | cut -d ":" -f1)
                                     ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 618:
                downnum=$((${down} - 1))
                           ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 644:
        read modid
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 657:
    read list
    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 676:
    read addordel
    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 690:
        read kleiid
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 712:
        read kleiid
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 718:
            sed -i "${kleid}d" "${data_dir}/${listfile}"
                    ^-- SC2154: kleid is referenced but not assigned (did you mean 'kleiid'?).


In dstserver.sh line 726:
    rm -rf "${dst_base_dir}/${cluster}"
           ^-- SC2115: Use "${var:?}" to ensure this never expands to / .


In dstserver.sh line 771:
    availablebuild=$(curl -s "${my_api_link}/" | sed 's/[ \t]*$//g' | tr -cd [0-9])
                                                                             ^-- SC2060: Quote parameters to tr to prevent glob expansion.


In dstserver.sh line 783:
    read force
    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 833:
    if [ $(grep "serveropen" -c "${server_conf_file}") -eq 0 ]
         ^-- SC2046: Quote this to prevent word splitting.


In dstserver.sh line 875:
    read yn
    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 881:
        read cluster
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 885:
            read ifdel
            ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 888:
                rm -rf "${dst_base_dir}/${cluster}"
                       ^-- SC2115: Use "${var:?}" to ensure this never expands to / .


In dstserver.sh line 901:
    echo "cluster=${cluster}" > "${server_conf_file}
                                ^-- SC1078: Did you forget to close this double quoted string?


In dstserver.sh line 902:
    echo "shardarray=${shardarray}" >> "${server_conf_file}
         ^-- SC1079: This is actually an end quote, but due to next char it looks suspect.
                     ^-- SC2086: Double quote to prevent globbing and word splitting.
                                        ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 914:
        read shardop
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 936:
    read ismaster
    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 948:
server_port = $((10997 + $idnum))
                         ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 962:
master_server_port = $((27016 + $idnum))
                                ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 963:
authentication_port = $((8766 + $idnum))
                                ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 967:
    idnum=$[ "$(ls -l "${dst_base_dir}/${cluster}" | grep ^d | awk '{print "$9}' | grep -c ^) + 1" ]
          ^-- SC2007: Use $((..)) instead of deprecated $[..]
                ^-- SC2010: Don't use ls | grep. Use a glob or a for loop with a condition to allow non-alphanumeric filenames.


In dstserver.sh line 1019:
    ls -l "${dst_base_dir}" | awk '/^d/ {print "$NF}' | grep -v downloadmod > "/tmp/dirlist.txt"
    ^-- SC2012: Use find instead of ls to better handle non-alphanumeric filenames.


In dstserver.sh line 1021:
    for dirlist in $(cat "/tmp/dirlist.txt")
                   ^-- SC2013: To read lines rather than words, pipe/redirect to a 'while read' loop.


In dstserver.sh line 1023:
        if [ $(ls -l "${dst_base_dir}/${dirlist}" | grep -c ^d) -gt 0 ]
             ^-- SC2046: Quote this to prevent word splitting.
               ^-- SC2010: Don't use ls | grep. Use a glob or a for loop with a condition to allow non-alphanumeric filenames.


In dstserver.sh line 1027:
                cluster_name_str=$(cat "${dst_base_dir}/${dirlist}/cluster.ini" | grep '^cluster_name =' | cut -d " " -f3)
                                       ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1040:
    read listnum
    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1041:
    cluster=$(cat "/tmp/dirlist.txt" | head -n "${listnum}" | tail -n 1)
                  ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1101:
        cat "${dst_cluster_file}" | grep -v "script_ver" | while read line
            ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.
                                                                 ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1117:
                    value=$(echo "${ss[1]}" | sed 's/#/ /g')
                            ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 1126:
            index=$((${index} + 1))
                     ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 1137:
                read cmd
                ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1148:
            changelist=($(sed -n ${cmd}p "${dst_cluster_file}"))
                                 ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1153:
                for ((i=5;i<${#changelist[*]};i=$i+2))
                                                ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 1155:
                    echo -e "\e[92m${index}.${changelist[$[$i + 1]]}\e[0m\c"
                                                         ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1156:
                    index=$((${index} + 1))
                             ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 1159:
                read changelistindex
                ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1160:
                listnum=$(($((${changelistindex} - 1)) * 2))
                              ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 1161:
                changelist[1]=${changelist[$[$listnum + 5]]}
                                           ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1164:
                read changestr
                ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1166:
                changestr=$(echo "${changestr}" | sed 's/ /#/g')
                            ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 1169:
            changestr="${changelist[@]}"
                      ^-- SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.


In dstserver.sh line 1170:
            sed -i ${cmd}c "${changestr}" ${dst_cluster_file}
                   ^-- SC2086: Double quote to prevent globbing and word splitting.
                                          ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1174:
    type=([STEAM] [GAMEPLAY] [NETWORK] [MISC] [SHARD])
                  ^-- SC2102: Ranges can only match single chars (mentioned due to duplicates).


In dstserver.sh line 1178:
        cat "${dst_cluster_file}" | grep -v "script_ver" | while read lc
            ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.
                                                                 ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1188:
                value_str=$(echo "${lcstr[1]}" | sed 's/#/ /g')
                            ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 1205:
    read ch
    ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1206:
    if [ $ch -eq 1 ]
         ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1209:
        read mytoken
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1210:
        mytoken=$(echo "${mytoken}" | sed 's/ //g')
                  ^-- SC2001: See if you can use ${variable//search/replace} instead.


In dstserver.sh line 1214:
        echo "${default_token}" > ${dst_token_file}
                                  ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1261:
        read wc
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1279:
        ================================世界环境================================
        ^-- SC2191: The = here is literal. To assign by index, use ( [index]=value ) with no spaces. To keep as literal, quote it.


In dstserver.sh line 1280:
        ==================================资源==================================
        ^-- SC2191: The = here is literal. To assign by index, use ( [index]=value ) with no spaces. To keep as literal, quote it.


In dstserver.sh line 1281:
        ==================================食物==================================
        ^-- SC2191: The = here is literal. To assign by index, use ( [index]=value ) with no spaces. To keep as literal, quote it.


In dstserver.sh line 1282:
        ==================================动物==================================
        ^-- SC2191: The = here is literal. To assign by index, use ( [index]=value ) with no spaces. To keep as literal, quote it.


In dstserver.sh line 1283:
        ==================================怪物==================================
        ^-- SC2191: The = here is literal. To assign by index, use ( [index]=value ) with no spaces. To keep as literal, quote it.


In dstserver.sh line 1288:
            cat "${configure_file}" | grep -v "script_ver" | while read line
                ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.
                                                                   ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1313:
                        index=$((${index} + 1))
                                 ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 1316:
                linenum=$((${linenum} + 1))
                           ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 1326:
                read cmd
                ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1340:
               for ((i=4;i<${#changelist[*]};i=$i+2))
                                               ^-- SC2004: $/${} is unnecessary on arithmetic variables.


In dstserver.sh line 1342:
                   echo -e "\e[92m${index}.${changelist[$[$i + 1]]}   \e[0m\c"
                                                        ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1343:
                   index=$[${index} + 1]
                         ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1346:
               read changelistindex
               ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1347:
               listnum=$[${changelistindex} - 1]*2
                       ^-- SC2125: Brace expansions and globs are literal in assignments. Quote it or use an array.
                       ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1348:
               changelist[1]=${changelist[$[$listnum + 4]]}
                                          ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1349:
               changestr="${changelist[@]}"
                         ^-- SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.


In dstserver.sh line 1350:
               sed -i ${cmd}c "${changestr}" "${configure_file}";;
                      ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1355:
    data_num=$[$(grep -n "^" "${configure_file}" | tail -n 1 | cut -d : -f1) - 1]
             ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1358:
    cat "${configure_file}" | grep -v "script_ver" | while read line
        ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.
                                                           ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1367:
        index=$[${index} + 1]
              ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1396:
    dir=$(cat "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua" | grep "workshop" | cut -f2 -d '"' | cut -d "-" -f2)
              ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1412:
    cd "${dst_server_dir}/bin"
    ^-- SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.


In dstserver.sh line 1428:
    echo "$(date)" >> "$log_save_dir/$cur_day/server_chat_log_backup_${cluster}_${shard}_${cur_time}.txt"
         ^-- SC2005: Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.


In dstserver.sh line 1430:
    echo "$(date)" >> "$log_save_dir/$cur_day/server_log_backup_${cluster}_${shard}_${cur_time}.txt"
         ^-- SC2005: Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.


In dstserver.sh line 1434:
    kill $(ps -ef | grep -v grep | grep $1 | awk '{print "$2}')
         ^-- SC2046: Quote this to prevent word splitting.
           ^-- SC2009: Consider using pgrep instead of grepping ps output.
                                        ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1444:
        tmux new-session -s DST_"${shard}"_log -d "bash "$HOME/dstserver.sh ay "$shard"
                                                         ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1445:
        shardnum=$[$shardnum + 1]
                 ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1454:
            anyline=$(sed -n "${any_log_index}p "${ays_log_file})
                                                 ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1457:
                any_log_index=$[$any_log_index + 1]
                              ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1459:
                if [ $(echo "$anyline" | grep -c ANALYSISLOGDONE) -gt 0 ]
                     ^-- SC2046: Quote this to prevent word splitting.


In dstserver.sh line 1461:
                    ANALYSIS_SHARD=$[$ANALYSIS_SHARD +1]
                                   ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1484:
            RES=`flock -x -n "$log_file" -c "echo ok"`
                ^-- SC2006: Use $(..) instead of legacy `..`.


In dstserver.sh line 1488:
                log_index=$[$log_index + 1]
                          ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1491:
            while read line
                  ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1493:
                if [[ $line =~ '.*script_ver.*' ]]
                               ^-- SC2076: Don't quote rhs of =~, it'll match literally rather than as a regex.


In dstserver.sh line 1497:
                    line_0=$(echo $line | cut -d '@' -f1)
                                  ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1498:
                    line_1=$(echo $line | cut -d '@' -f2)
                                  ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1499:
                    line_2=$(echo $line | cut -d '@' -f3)
                                  ^-- SC2086: Double quote to prevent globbing and word splitting.


In dstserver.sh line 1500:
                    if [[ "$line1" =~ "$line_1" ]]
                                      ^-- SC2076: Don't quote rhs of =~, it'll match literally rather than as a regex.


In dstserver.sh line 1509:
                            retrytime=$[$retrytime + 1]
                                      ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1515:
                                num=$(grep "$line_2" -n "${data_dir}/log_arr_str_$1.txt" | cut -d ":" -f1)
                                                        ^-- SC2094: Make sure not to read and write the same file in the same pipeline.


In dstserver.sh line 1516:
                                sed -i "${num}d" "${data_dir}/log_arr_str_$1.txt"
                                                 ^-- SC2094: Make sure not to read and write the same file in the same pipeline.


In dstserver.sh line 1523:
                            num=$(grep "$line_2" -n "${data_dir}/log_arr_str_$1.txt" | cut -d ":" -f1)
                                                    ^-- SC2094: Make sure not to read and write the same file in the same pipeline.


In dstserver.sh line 1524:
                            sed -i "${num}d" "${data_dir}/log_arr_str_$1.txt"
                                             ^-- SC2094: Make sure not to read and write the same file in the same pipeline.


In dstserver.sh line 1529:
            done < "${data_dir}/log_arr_str_$1.txt"
                   ^-- SC2094: Make sure not to read and write the same file in the same pipeline.


In dstserver.sh line 1565:
    if [ $(free -m | grep -i swap | tr -cd [0-9]) == "000" ]
         ^-- SC2046: Quote this to prevent word splitting.
                                           ^-- SC2060: Quote parameters to tr to prevent glob expansion.


In dstserver.sh line 1575:
    mkdir -p "${DST_conf_basedir}/${DST_conf_dirname}"
              ^-- SC2154: DST_conf_basedir is referenced but not assigned (did you mean 'dst_conf_basedir'?).
                                  ^-- SC2154: DST_conf_dirname is referenced but not assigned (did you mean 'dst_conf_dirname'?).


In dstserver.sh line 1583:
    elif cat /etc/issue | grep -q -E -i "debian"
             ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1586:
    elif cat /etc/issue | grep -q -E -i "ubuntu"
             ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1589:
    elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat"
             ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1592:
    elif cat /proc/version | grep -q -E -i "debian"
             ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1595:
    elif cat /proc/version | grep -q -E -i "ubuntu"
             ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1598:
    elif cat /proc/version | grep -q -E -i "centos|red hat|redhat"
             ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1606:
    bit=`uname -m`
        ^-- SC2006: Use $(..) instead of legacy `..`.


In dstserver.sh line 1660:
    datelog=$(cat "/tmp/changelog.txt" | head -n 1)
                  ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1661:
    cat "/tmp/changelog.txt" | grep -A 20 "更新日志 ${datelog}"
        ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1669:
    for file in $(cat "/tmp/filelist.txt" | cut -d ":" -f1)
                ^-- SC2013: To read lines rather than words, pipe/redirect to a 'while read' loop.
                      ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1671:
        new_ver=$(cat "/tmp/filelist.txt" | grep "${file}" | cut -d ":" -f2)
                      ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1680:
            cur_ver=$(cat "${HOME}/${truefile}" | grep "script_ver=" | head -n 1 | cut -d '"' -f2)
                          ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1721:
    for modid in $(grep '^  \["workshop-' "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua" | cut -d '"' -f2 | cut -d '-' -f2)
                 ^-- SC2013: To read lines rather than words, pipe/redirect to a 'while read' loop.


In dstserver.sh line 1728:
            cd "${data_dir}"
            ^-- SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.


In dstserver.sh line 1732:
            cd "${data_dir}"
            ^-- SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.


In dstserver.sh line 1790:
    [ -f "${dst_base_dir}/${cluster}/cluster.ini" ] && cluster_name=$(cat "${dst_base_dir}/${cluster}/cluster.ini" | grep "^cluster_name" | cut -d "=" -f2)
                                                                          ^-- SC2002: Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.


In dstserver.sh line 1873:
        while read line
              ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1896:
    echo "$(date +%s)" > "${data_dir}/ipmd5.txt"
         ^-- SC2005: Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.


In dstserver.sh line 1906:
        cycle=$[ "${cur_time}" - "${old_time}" ]
              ^-- SC2007: Use $((..)) instead of deprecated $[..]


In dstserver.sh line 1951:
        read an
        ^-- SC2162: read without -r will mangle backslashes.


In dstserver.sh line 1984:
        read ismove
        ^-- SC2162: read without -r will mangle backslashes.

