#!/bin/bash
#===============================================================================
#    System Required: Ubuntu12+/Debian7+/CentOS7+
#    Description: Install and manager the Don't Starve Together Dedicated Server
#    Author: Ariwori
#    Blog: https://wqlin.com
#===============================================================================
script_ver="2.2.7"
dst_conf_dirname="DoNotStarveTogether"
dst_conf_basedir="${HOME}/.klei"
dst_base_dir="${dst_conf_basedir}/${dst_conf_dirname}"
dst_server_dir="${HOME}/DSTServer"
dst_bin_cmd="./dontstarve_dedicated_server_nullrenderer"
data_dir="${HOME}/.dstscript_en"
dst_token_file="${data_dir}/clustertoken.txt"
server_conf_file="${data_dir}/server.conf"
dst_cluster_file="${data_dir}/clusterdata.txt"
feedback_link="Klei Forum OR mailto:i@wqlin.com"
my_api_link="https://api.wqlin.com/dst"
update_link="${my_api_link}/dstscript"
# 
info(){
    echo -e "\033[32m[Info]\033[0m $1"
}
tip(){
    echo -e "\033[33m[Tips]\033[0m $1"
}
error(){
    echo -e "\031[33m[Error]\033[0m $1"
}
# Main menu
Menu(){
    while (true)
    do
        echo -e "\e[33m============DST Dedicated Server Manager Script [Linux-Steam](${script_ver})============\e[0m"
        echo -e "\e[33mAuthor：Ariwori        Bug Feed back：${feedback_link}\e[0m"
        echo -e "\e[33mAll rights reserved\e[0m"
        echo -e "\e[31mGame Server Installed In：${dst_server_dir} (Version: $(cat ${dst_server_dir}/version.txt))\e[33m[${dst_need_update_str}]\e[0m"
        echo -e "\e[35mAnnounce：$(cat "${data_dir}/announce.txt" | grep -v script_ver)\e[0m"
        echo -e "\e[92m[1]Start Server           [2]close Server       [3]Reboot Server\e[0m"
        echo -e "\e[92m[4]Modify Cluster         [5]Manager MOD        [6]Manager List\e[0m"
        echo -e "\e[92m[7]Server Console         [8]Auto Update        [9]Exit\e[0m"
        echo -e "\e[92m[10]Delete Cluster        [11]Update Game       [12]Update MOD\e[0m"
        echo -e "\e[92m[13]Global Setting\e[0m"
        Simple_server_status
        echo -e "\e[33m================================================================================\e[0m"
        echo -e "\e[92m(Press Ctrl+C to Abort）Choose a command number：\e[0m\c"
        read cmd
        case ${cmd} in
            1)
            Start_server
            ;;
            2)
            Close_server
            Exit_auto_update
            ;;
            3)
            Reboot_server
            ;;
            4)
            Change_cluster
            ;;
            5)
            MOD_manager
            ;;
            6)
            List_manager
            ;;
            7)
            Server_console
            ;;
            8)
            Auto_update
            ;;
            9)
            exit
            ;;
            10)
            Cluster_manager
            ;;
            11)
            Force_update
            ;;
            12)
            Update_MOD
            ;;
            13)
            Global_settings
            ;;
            *)
            error "Error input !!!"
            ;;
        esac
    done
}
Global_settings(){
    info "Please select the global configuration you want to modify:\n    1. Rewrite the locally uploaded archive to the script configuration format"
    read global
    case $global in
        1)
        Change_override
        ;;
        *)
        error "Error input !!!"
        ;;
    esac
}
Change_override(){
    info "Rewrite? 1. Yes   2.NO"
    read override
    case $override in
        1)
        sed -i 's/override_settings=false/override_settings=true/g' $data_dir/global_settings.conf
        clear
        tip "Locally uploaded archives will be Transfer to the script format"
        ;;
        2)
        sed -i 's/override_settings=true/override_settings=false/g' $data_dir/global_settings.conf
        clear
        tip "Locally uploaded archives will not be Transfer to the script format.\n    Please DO NOT USE SCRIPT COMMAND [Mannager MOD]!"
        ;;
        *)
        error "Error input !!!"
        ;;
    esac
}
Change_cluster(){
    Get_current_cluster
    Set_cluster
}
Server_console(){
    Get_single_shard
    if tmux has-session -t DST_${shard} > /dev/null 2>&1
    then
        info "Going to ${shard} server console ... Press Ctrl + B and then press D when exit OR Server may stop!"
        sleep 3
        tmux attach-session -t DST_${shard}
    else
        tip "Sorry! ${shard} Server isn't running...or something error! Try to reboot server."
    fi
}
Get_shard_array(){
    [ -f ${server_conf_file} ] && shardarray=$(grep "shardarray" ${server_conf_file} | cut -d "=" -f2)
}
Get_single_shard(){
    Get_shard_array
    shard=$(echo $shardarray | cut -d ' ' -f1)
}
Get_current_cluster(){
    [ -f ${server_conf_file} ] && cluster=$(cat ${server_conf_file} | grep "^cluster" | cut -d "=" -f2)
}
Get_server_status(){
    [ -f ${server_conf_file} ] && serveropen=$(grep "serveropen" ${server_conf_file} | cut -d "=" -f2)
}
MOD_manager(){
    Get_current_cluster
    echo -e "\e[92m[Current cluster：${cluster}] Choose what you want to 1.enable mod  2.disable mod：\e[0m\c"
    read mc
    case ${mc} in
        1)
        Listallmod
        Addmod;;
        2)
        Listusedmod
        Delmod;;
        *)
        break;;
    esac
}
MOD_conf(){
    echo "fuc = \"${fuc}\"
modid = \"${moddir}\"
used = \"${used}\"" > "${data_dir}/modinfo.lua"
    if [[ -f "${dst_server_dir}/mods/${moddir}/modinfo.lua" ]]
    then
        cat "${dst_server_dir}/mods/${moddir}/modinfo.lua" >> "${data_dir}/modinfo.lua"
    else
        needdownloadid=$(echo ${moddir} | cut -d "-" -f2)
        echo "ServerModSetup(\"$needdownloadid\")" > ${dst_server_dir}/mods/dedicated_server_mods_setup.lua
        if [[ ${fuc} == "writein" ]]
        then
            Download_MOD
        fi
        if [[ -f "${dst_server_dir}/mods/${moddir}/modinfo.lua" ]]
        then
            cat "${dst_server_dir}/mods/${moddir}/modinfo.lua" >> "${data_dir}/modinfo.lua"
        else
            echo "name = \"UNKNOWN\"" >> "${data_dir}/modinfo.lua"
        fi
    fi
    cd ${data_dir}
    lua ${data_dir}/modconf.lua > /dev/null 2>&1
    cd ${HOME}
}
Listallmod(){
    if [ ! -f ${data_dir}/mods_setup.lua ]
    then
        touch ${data_dir}/mods_setup.lua
    fi
    rm -f ${data_dir}/modconflist.lua
    Get_single_shard
    for moddir in $(ls -F "${dst_server_dir}/mods" | grep "/$" | cut -d '/' -f1)
    do
        if [ $(grep "${moddir}" -c "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua") -gt 0 ]
        then
            used="true"
        else
            used="false"
        fi
        if [[ "${moddir}" != "" ]]
        then
            fuc="list"
            MOD_conf
        fi
    done
    grep -n "^" ${data_dir}/modconflist.lua
}
Listusedmod(){
    rm -f ${data_dir}/modconflist.lua
    Get_single_shard
    for moddir in $(grep "^\[" "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua" | cut -d '"' -f2)
    do
        if [[ "${moddir}" != "" ]]
        then
            fuc="list"
            used="true"
            MOD_conf
        fi
    done
    grep -n "^" ${data_dir}/modconflist.lua
}
Addmod(){
    info "Please choose the MOD's [Index number] form list above，OR Type MODID here."
    info "Detail configuration writed in modoverride.lua, you can modify it yourself"
    info "All done to exit that type number '0' here!"
    while (true)
    do
        read modid
        if [[ "${modid}" == "0" ]]
        then
            info "All MOD enable done!"
            break
        else
            Addmodfunc
        fi
    done
    info "Detail configuration writed in modoverride.lua, you can modify it yourself"
    info "${dst_base_dir}/${cluster}/${shardarray}/modoverrides.lua"
    sleep 3
    clear
}
Addmodtoshard(){
    Get_shard_array
    for shard in ${shardarray}
    do
        if [ -f ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua ]
        then
            if [[ $(grep "${moddir}" "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua") > 0 ]]
            then
                info "This MOD already enabled in ${shard} Server"
            else
                sed -i '1d' ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua
                cat ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua > ${data_dir}/modconftemp.txt
                echo "return {" > ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua
                cat ${data_dir}/modconfwrite.lua >> ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua
                cat ${data_dir}/modconftemp.txt >> ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua
                info "MOD(${moddir}) now enabled in ${shard} Server."
            fi
        else
            tip "The ${shard} Server's MOD configuration file isn't script's format. Abort ..."
        fi
    done
}
Truemodid(){
    if [ ${modid} -lt 1000 ]
    then
        moddir=$(sed -n ${modid}p ${data_dir}/modconflist.lua | cut -d ':' -f2)
    else
        moddir="workshop-${modid}"
    fi
}
Addmodfunc(){
    Truemodid
    fuc="writein"
    MOD_conf
    Addmodtoshard
}
Delmodfromshard(){
    for shard in ${shardarray}
    do
        if [ -f ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua ]
        then
            if [[ $(grep "${moddir}" -c "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua") > 0 ]]
            then
                grep -n "^\[" "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua" > ${data_dir}/modidlist.txt
                up=$(grep "${moddir}" "${data_dir}/modidlist.txt" | cut -d ":" -f1)
                down=$(grep -A 1 "${moddir}" "${data_dir}/modidlist.txt" | tail -1 |cut -d ":" -f1)
                upnum=$((${up} - 1))
                downnum=$((${down} - 2))
                sed -i "${upnum},${downnum}d" "${dst_base_dir}/${cluster}/${shard}/modoverrides.lua"
                nfo "MOD(${moddir}) now disabled in ${shard} Server."
            else
                info "This MOD already disabled in ${shard} Server"
            fi
        else
            tip "The ${shard} Server's MOD configuration file isn't script's format. Abort ..."
        fi
    done
}
Delmod(){
    info "Please choose the MOD's [Index number] form list above."
    info "All done to exit that type number '0' here!"
    while (true)
    do
        read modid
        if [[ "${modid}" == "0" ]]
        then
            info "MOD disabled done!"
            break
        else
            Truemodid
            Delmodfromshard
        fi
    done
}
List_manager(){
    echo -e "\e[92mYou want to configure：1.Admin list  2.Black list  3.White list ? \e[0m\c"
    read list
    case ${list} in
        1)
        listfile="alist.txt"
        listname="Admin list"
        ;;
        2)
        listfile="blist.txt"
        listname="Black list"
        ;;
        3)
        listfile="wlist.txt"
        listname="White list"
        ;;
        *)
        error "Error input，Please type number [1-3] here."
        ;;
    esac
    echo -e "\e[92mYou want to：1.Add ${listname} 2.Remove ${listname} ? \e[0m\c"
    read addordel
    case ${addordel} in
        1)
        Addlist
        ;;
        2)
        Dellist
        ;;
    esac
}
Addlist(){
    echo -e "\e[92mPlease type the KLEIID（KU_XXXXXXX） you want to add here：(input number 0 to exit)\e[0m"
    while (true)
    do
        read kleiid
        if [[ "${kleiid}" == "0" ]]
        then
            info "Add list done!"
            break
        else
            if [[ $(grep "${kleiid}" -c "${data_dir}/${listfile}") > 0 ]]
            then
                info "Klei ID ${kleiid} already exsit!"
            else
                echo "${kleiid}" >> ${data_dir}/${listfile}
                info "Klei ID ${kleiid} added now!"
            fi
        fi
    done
}
Dellist()
{
    while (ture)
    do
        echo "====================Exsited Klei ID================================================"
        grep -n "KU" "${data_dir}/${listfile}"
        echo -e "\e[92mPlease type the KLEIID（KU_XXXXXXX） you want to remove here：(input number 0 to exit)\e[0m"
        read kleiid
        if [[ "${kleiid}" == "0" ]]
        then
            info "Remove list done!"
            break
        else
            sed -i "${kleid}d" ${dst_base_dir}/${listfile}
            info "Klei ID ${kleiid} removed now!"
        fi
    done
}
Cluster_manager(){
    cluster_str="Delete"
    Choose_exit_cluster
    rm -rf ${dst_base_dir}/${cluster}
    info "Cluster ${cluster} has been deleted now!"
}
Auto_update(){
    if tmux has-session -t Auto_update > /dev/null 2>&1
    then
        info "Going to AUTO UPDATE SCREEN ... Press Ctrl + B and then press D to exit."
        sleep 3
        tmux attach-session -t Auto_update
    else
        tmux new-session -s Auto_update -d "./dstserver.sh au"
        info "Auto update has been enabled now."
    fi
}
Update_DST_Check(){
    # data from klei forums
    info "Checking if the game server has an update ... please wait ..."
    currentbuild=$(cat ${dst_server_dir}/version.txt)
    #availablebuild=$(curl -s ${my_api_link} | sed 's/[ \t]*$//g')
    #respond=$(echo ${availablebuild} | tr -cd [0-9])
	#if [ ${respond} != "" ] && ["${currentbuild}" != "${availablebuild}" ]
    availablebuild=$(curl -s "${my_api_link}/" | sed 's/[ \t]*$//g' | tr -cd [0-9])
    # Gets availablebuild info
	#cd "${steamcmddir}" || exit
	#availablebuild=$(./steamcmd.sh +login "${steamuser}" "${steampass}" +app_info_update 1 +app_info_print "${appid}" +app_info_print "${appid}" +quit | sed -n '/branch/,$p' | grep -m 1 buildid | tr -cd '[:digit:]')
    #availablebuild=$(curl -s https://forums.kleientertainment.com/game-updates/dst/ | grep 'data-releaseID=' | cut -d '/' -f6 | cut -d "-" -f1 | sort | tail -n 1 | tr -cd [0-9])
    if [[ "${currentbuild}" != "${availablebuild}" && "${availablebuild}" != "" ]]
    then
        dst_need_update=true
        dst_need_update_str="Need to update"
    else
        dst_need_update=false
        dst_need_update_str="Updated"
    fi
}
Force_update(){
    echo -e "\e[92mForce to update the game server：1.Yes  2.No ? \e[0m\c"
    read force
    case $force in
        1)
        Get_server_status
        cur_serveropen=${serveropen}
        Reboot_announce
        Close_server
        Install_Game
        if [[ ${cur_serveropen} == "true" ]]
        then
            Run_server
        fi
        ;;
        *)
        Update_DST
        ;;
    esac
}
Update_DST(){
    Get_server_status
    cur_serveropen=${serveropen}
    Update_DST_Check
    if [[ ${dst_need_update} == "true" ]]
    then
        info "Game server update is available(${currentbuild}===>${availablebuild})！ Updating ..."
        Reboot_announce
        Close_server
        Install_Game
    else
        tip "Game server update isn't available! The Newest version（${availablebuild}）"
    fi
    if [[ ${cur_serveropen} == "true" && ${dst_need_update} == "true" ]]
    then
        Run_server
    fi
}
###################################################################
Reboot_server(){
    info "Rebooting Server ... Please wait ..."
    Reboot_announce
    Close_server
    Run_server
}
exchangestatus(){
    if [ ! -f ${server_conf_file} ]
    then
        touch ${server_conf_file}
    fi
    if [ $(grep "serveropen" -c ${server_conf_file}) -eq 0 ]
    then
        echo "serveropen=$1" >> ${server_conf_file}
    else
        str=$(grep "serveropen" ${server_conf_file})
        sed -i "s/${str}/serveropen=$1/g" ${server_conf_file}
    fi
}
Run_server(){
    Get_current_cluster
    Get_shard_array
    exchangestatus true
    Default_mod
    Set_list
    Start_shard
    info "Starting Server ... Please wait ..."
    sleep 10
    Start_check
}
Reboot_announce(){
    Get_shard_array
    for shard in ${shardarray}
    do
        if tmux has-session -t DST_${shard} > /dev/null 2>&1
        then
            tmux send-keys -t DST_${shard} "c_announce(\"Sorry! The ${shard} Server will reboot in a minute!\")" C-m
        fi
        sleep 5
    done
}
Start_server(){
    info "Trying to close server that runnning ..."
    Close_server
    Exit_auto_update
    echo -e "\e[92mCreate new cluster: [y|n] (default: y): \e[0m\c"
    read yn
    [[ -z "${yn}" ]] && yn="y"
    new_cluster=""
    if [[ ${yn} == [Yy] ]]
    then
        echo -e "\e[92mPlease input new cluster name here：（no symbol）\e[0m"
        read cluster
        if [ -d "${dst_base_dir}/${cluster}" ]
        then
            tip "Cluster ${cluster} already exsited! Delete it：1.Yes  2.No？ "
            read ifdel
            if [[ $ifdel == "2" ]]
            then
                rm -rf ${dst_base_dir}/${cluster}
            else
                rm -rf ${dst_base_dir}/${cluster}/cluster.ini
            fi
        fi
        mkdir -p ${dst_base_dir}/${cluster}
        Set_cluster
        Set_token
        new_cluster="true"
    else
        cluster_str="Start"
        Choose_exit_cluster
    fi
    echo "cluster=${cluster}" > ${server_conf_file}
    echo -e "\e[92mChoose what you want to run：\n    1.Only Forest（OR Forge MOD）\n    2.Only Caves(Need a Forest first)\n    3.Forest and Caves\n?: \e[0m\c"
    read shardop
    case ${shardop} in
        1)
        shardarray="Master";;
        2)
        shardarray="Caves";;
        *)
        shardarray="Master Caves";;
    esac
    echo "shardarray=${shardarray}" >> ${server_conf_file}
    if [[ ${new_cluster} == "true" ]]
    then
        for shard in ${shardarray}
        do
            mkdir -p ${dst_base_dir}/${cluster}/${shard}
            Set_serverini
            Set_world
        done
    fi
    Import_cluster
    Run_server
}
# import
Import_cluster(){
    Default_mod
    override_settings=$(cat $data_dir/global_settings.conf | grep "override_settings" | cut -d '=' -f2)
    if [[ $override_settings == "true" ]]
    then
        for shard in ${shardarray}
        do
            if [ $(grep "DONOTDELETE" -c ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua) -eq 0 ]
            then
                info "Not script configuratin format，transfering ..."
                if [ -f ${data_dir}/enabled_mod.txt ]
                then
                    rm -rf ${data_dir}/enabled_mod.txt
                fi
                touch ${data_dir}/enabled_mod.txt
                cat ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua | grep '^  \[' | cut -d '"' -f2 > ${data_dir}/enabled_mod.txt
                echo 'return {
-- DO NOT DELETE THIS ONE
["DONOTDELETE"]={ configuration_options={  }, enabled=true }
}' > ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua
                cat ${data_dir}/enabled_mod.txt | while read line
                do 
                    moddir=$line
                    fuc="writein"
                    MOD_conf
                    Addmodtoshard
                done
                info "Cluster transfer done!"
            fi
        done
    fi
    if [ ! -f ${dst_base_dir}/${cluster}/cluster_token.txt ]
    then
        Set_token
    fi
}
Choose_exit_cluster(){
    echo -e "\e[92mExsited cluster：\e[0m"
    ls -l ${dst_base_dir} | awk '/^d/ {print $NF}' | grep -v downloadmod > /tmp/dirlist.txt
    index=1
    for dirlist in $(cat /tmp/dirlist.txt)
    do
        if [ -f ${dst_base_dir}/${dirlist}/cluster.ini ]
        then
            cluster_name_str=$(cat ${dst_base_dir}/${dirlist}/cluster.ini | grep ^cluster_name= | cut -d "=" -f2)
        fi
        if [[ $cluster_name_str == "" ]]
        then
            cluster_name_str="A broken cluster"
        fi
        echo "${index}. ${dirlist}：${cluster_name_str}"
        let index++
    done
    echo -e "\e[92mPlease choose the cluster you want to ${cluster_str}. Input the [Index number]：\e[0m\c"
    read listnum
    cluster=$(cat /tmp/dirlist.txt | head -n ${listnum} | tail -n 1)
}
Close_server(){
    tip "Closing the server that running ..."
    for shard in ${shardarray}
    do
        if tmux has-session -t DST_${shard} > /dev/null 2>&1
        then
            tmux send-keys -t DST_${shard} "c_shutdown(true)" C-m
            info "${shard} Server has been closed now!"
            exchangestatus false
        else
            info "${shard} Server is not running!"
        fi
        sleep 5
    done
}
Exit_auto_update(){
    if tmux has-session -t Auto_update > /dev/null 2>&1
    then
        tmux kill-session -t Auto_update > /dev/null 2>&1
    fi
    info "Auto update process has been exited ..."
}
Set_cluster(){
    if [ -f ${dst_base_dir}/${cluster}/cluster.ini ]
    then
        rm -rf ${dst_base_dir}/${cluster}/cluster.ini
    fi
    while (true)
    do
        clear
        echo -e "\e[92m=============[Current cluster：${cluster}]===============\e[0m"
        index=1
        cat ${dst_cluster_file} | grep -v "script_ver" | while read line
        do
            ss=(${line})
            if [ "${ss[4]}" != "readonly" ]
            then
                #if [ "${ss[4]}" == "choose" ]
                #then
                #    for ((i=5;i<${#ss[*]};i++))
                #    do
                #        if [ "${ss[$i]}" == "${ss[1]}" ]
                #        then
                #            value=${ss[$i+1]}
                #        fi
                #    done
                #else
                #    # 处理替代空格的#号
                value=$(echo ${ss[1]} | sed 's/#/ /g')
                #fi
                echo -e "\e[33m[${index}] ${ss[0]}：${value}\e[0m"
            fi
            index=$[${index} + 1]
        done
        echo -e "\e[92m===============================================\e[0m"
        cmd=""
        while (true)
        do
            if [[ ${cmd} == "" ]]
            then
                echo -e "\e[92mPlease choose what you want to change(input number 0 to exit)：\e[0m\c"
                read cmd
            else
                break
            fi
        done
        case ${cmd} in
            0)
            info "Changes saved!"
               break
               ;;
            *)
            changelist=($(sed -n "${cmd}p" ${dst_cluster_file}))
            if [ "${changelist[4]}" = "choose" ]
            then
                echo -e "\e[92mPlease seclect ${changelist[0]}： \e[0m\c"
                index=1
                for ((i=5;i<${#changelist[*]};i=$i+2))
                do
                    echo -e "\e[92m${index}.${changelist[$[$i]]}  \e[0m\c"
                    index=$[${index} + 1]
                done
                echo -e "\e[92m: \e[0m\c"
                read changelistindex
                listnum=$[${changelistindex} - 1]*2
                changelist[1]=${changelist[$[$listnum + 5]]}
            else
                echo -e "\e[92mPlease input ${changelist[2]}：\e[0m\c"
                read changestr
                # 处理空格
                changestr=$(echo ${changestr} | sed 's/ /#/g')
                changelist[1]=${changestr}
            fi
            changestr="${changelist[@]}"
            sed -i "${cmd}c ${changestr}" ${dst_cluster_file}
            ;;
        esac
    done
    type=([GAMEPLAY] [NETWORK] [MISC] [SHARD])
    for ((i=0;i<${#type[*]};i++))
    do
        echo "${type[i]}" >> ${dst_base_dir}/${cluster}/cluster.ini
        cat ${dst_cluster_file} | grep -v "script_ver" | while read lc
        do
            lcstr=($lc)
            if [ "${lcstr[3]}" == "${type[i]}" ]
            then
                if [ "${lcstr[1]}" == "null" ]
                then
                    lcstr[1]=""
                fi
                # 还原空格
                value_str=$(echo ${lcstr[1]} | sed 's/#/ /g')
                echo "${lcstr[0]}=${value_str}" >> ${dst_base_dir}/${cluster}/cluster.ini
            fi
        done
        echo "" >> ${dst_base_dir}/${cluster}/cluster.ini
    done
}
Set_token(){
    if [ -f ${dst_token_file} ]
    then
        default_token=$(cat ${dst_token_file})
    else
        default_token="pds-g^KU_6yNrwFkC^9WDPAGhDM9eN6y2v8UUjEL3oDLdvIkt2AuDQB2mgaGE="
    fi
    info "Current cluster token ：\n ${default_token}"
    echo -e "\e[92mModify？ 1.Yes  2.No : \e[0m\c"
    read ch
    if [ $ch -eq 1 ]
    then
        tip "Please input or paste your token here："
        read mytoken
        mytoken=$(echo ${mytoken} | sed 's/ //g')
        echo ${mytoken} > ${dst_token_file}
        info "New cluster token saved!"
    else
        echo ${default_token} >${dst_token_file}
    fi
    cat ${dst_token_file} > ${dst_base_dir}/${cluster}/cluster_token.txt
}
Set_list(){
    if [ ! -f ${data_dir}/alist.txt ]
    then
        touch ${data_dir}/alist.txt
    fi
    if [ ! -f ${data_dir}/blist.txt ]
    then
        touch ${data_dir}/blist.txt
    fi
    if [ ! -f ${data_dir}/wlist.txt ]
    then
        touch ${data_dir}/wlist.txt
    fi
    cat ${data_dir}/alist.txt > ${dst_base_dir}/${cluster}/adminlist.txt
    cat ${data_dir}/blist.txt > ${dst_base_dir}/${cluster}/blocklist.txt
    cat ${data_dir}/wlist.txt > ${dst_base_dir}/${cluster}/whitelist.txt
}
Set_serverini(){
    cat ${data_dir}/${shard}ini.ini > ${dst_base_dir}/${cluster}/${shard}/server.ini
}
Set_world(){
    game_mode=$(cat ${dst_base_dir}/${cluster}/cluster.ini | grep ^game_mode= | cut -d "=" -f2)
    if [[ ${game_mode} != "lavaarena" ]]
    then
        info "Modify ${shard} world settings？：1.Yes 2.No"
        read wc
        configure_file="${data_dir}/${shard}leveldata.txt"
        data_file="${dst_base_dir}/${cluster}/${shard}/leveldataoverride.lua"
        if [ ${wc} -ne 2 ]
        then
            Set_world_config
        fi
        Write_in ${shard}
    else
        cat ${data_dir}/lavaarena.lua > ${dst_base_dir}/${cluster}/${shard}/leveldataoverride.lua
        info "Forge MOD world setting saved!"
        info "Checking Whether the Forge MOD has been downloaded and installed ..."
        if [ -f ${dst_server_dir}/mods/workshop-1531169447/modinfo.lua ]
        then
            info "The Forge MOD already downloaded."
        else
            tip "The Forge MOD not exsit ... Dowloading ..."
            echo "ServerModSetup(\"1531169447\")" > ${dst_server_dir}/mods/dedicated_server_mods_setup.lua
            Download_MOD
        fi
        if [ -f ${dst_server_dir}/mods/workshop-1531169447/modinfo.lua ]
        then
            Default_mod
            modid='1531169447'
            Get_shard_array
            Addmodfunc
            info "The Forge MOD is enabled."
        else
            tip "The Forge MOD download error."
        fi
    fi
}
Set_world_config(){
    while (true)
    do
        clear
        index=1
        linenum=1
        list=(environment source food animal monster)
        liststr=(
        ==========================================environment=======================================
        ============================================source==========================================
        ============================================food============================================
        ============================================animal==========================================
        ============================================monster=========================================
        )
        for ((j=0;j<${#list[*]};j++))
        do
            echo -e "\n\e[92m${liststr[$j]}\e[0m"
            cat ${configure_file} | grep -v "script_ver" | while read line
            do
                ss=(${line})
                if [ ${#ss[@]} -gt 4 ]
                then
                    if [ ${index} -gt 3 ]
                    then
                        printf "\n"
                        index=1
                    fi
                    #for ((i=4;i<${#ss[*]};i++))
                    #do
                    #    if [ "${ss[$i]}" == "${ss[1]}" ]
                    #    then
                    #        value=${ss[$i+1]}
                    #    fi
                    #done
                    value=${ss[1]}
                    if [ "${list[$j]}" == "${ss[2]}" ]
                    then
                        printf "%-30s\t" "[${linenum}]${ss[0]}: ${value}"
                        index=$[${index} + 1]
                    fi
                fi
                linenum=$[${linenum} + 1]
            done
        done
        printf "\n"
        cmd=""
        while (true)
        do
            if [[ ${cmd} == "" ]]
            then
                echo -e "\e[92mChoose what you want to change(input number 0 to exit)： \e[0m\c"
                read cmd
            else
                break
            fi
        done
        case ${cmd} in
            0)
            info "Changes saved!"
            break
            ;;
            *)
            changelist=($(sed -n "${cmd}p" ${configure_file}))
            echo -e "\e[92mPlease seclect ${changelist[0]}： \e[0m\c"
            index=1
            for ((i=4;i<${#changelist[*]};i=$i+2))
            do
                echo -e "\e[92m${index}.${changelist[$[$i]]}  \e[0m\c"
                index=$[${index} + 1]
            done
            echo -e "\e[92m: \e[0m\c"
            read changelistindex
            listnum=$[${changelistindex} - 1]*2
            changelist[1]=${changelist[$[$listnum + 4]]}
            changestr="${changelist[@]}"
            sed -i "${cmd}c ${changestr}" ${configure_file}
            ;;
        esac
    done
}
Write_in(){
    data_num=$[$(grep -n "^" ${configure_file} | tail -n 1 | cut -d : -f1) - 1]
    cat "${data_dir}/${1}start.lua" > ${data_file}
    index=1
    cat ${configure_file} | grep -v "script_ver" | while read line
    do
        ss=(${line})
        if [ ${index} -lt ${data_num} ]
        then
            char=","
        else
            char=""
        fi
        index=$[${index} + 1]
        if [[ ${ss[1]} == "highlyrandom" ]]
        then
            str="${ss[0]}=\"highly random\"${char}"
        else
            str="[\"${ss[0]}\"]=\"${ss[1]}\"${char}"
        fi
        echo "    ${str}" >> ${data_file}
    done
    cat "${data_dir}/${1}end.lua" >> ${data_file}
}
Default_mod(){
    for shard in ${shardarray}
    do
        if [ ! -f ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua ]
        then
            echo 'return {
-- DO NO DELETE THIS ONE
["DONOTDELETE"]={ configuration_options={  }, ["enabled"]=true }
}' > ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua
        fi
    done
}
Setup_mod(){
    if [ -f ${data_dir}/mods_setup.lua ]
    then
        rm -rf ${data_dir}/mods_setup.lua
    fi
    touch ${data_dir}/mods_setup.lua
    Get_single_shard
    dir=$(cat ${dst_base_dir}/${cluster}/${shard}/modoverrides.lua | grep "workshop" | cut -f2 -d '"' | cut -d "-" -f2)
    for moddir in ${dir}
    do
        if [[ $(grep "${moddir}" -c "${data_dir}/mods_setup.lua") = 0 ]]
        then
            echo "ServerModSetup(\"${moddir}\")" >> "${data_dir}/mods_setup.lua"
        fi
    done
    cp "${data_dir}/mods_setup.lua" "${dst_server_dir}/mods/dedicated_server_mods_setup.lua"
}
Start_shard(){
    Setup_mod
    cd "${dst_server_dir}/bin"
    for shard in ${shardarray}
    do
        unset TMUX
        tmux new-session -s DST_${shard} -d "${dst_bin_cmd} -cluster ${cluster} -shard ${shard}"
    done
}
Start_check(){
    Get_shard_array
    newshardarray=""
    for shard in ${shardarray}
    do
        serverlog_path="${dst_base_dir}/${cluster}/${shard}/server_log.txt"
        start_time=$(date "+%s")
        while (true)
        do
            if tmux has-session -t DST_${shard} > /dev/null 2>&1
            then
                if [[ $(grep "SteamGameServer_Init success" -c "${serverlog_path}") > 0 ]]
                then
                    newshardarray="${newshardarray}${shard}"
                    break
                fi
                if [[ $(grep "Your Server Will Not Start" -c "${serverlog_path}") > 0 ]]
                then
                    newshardarray="TOKENINVALID"
                    break
                fi
            else
                current_time=$(date "+%s")
                check_time=$[ $current_time - $start_time ]
                # 一分钟超时 MOD bug 或者设置问题
                if [ ${check_time} > 60 ]
                then
                    newshardarray="BREAK"
                    break
                fi
            fi
            current_time=$(date "+%s")
            check_time=$[ ${current_time} - ${start_time} ]
            # 十分钟超时 MOD下载超时或端口占用
            if [ ${check_time} -gt 600 ]
            then
                newshardarray="TIME_OUT"
                break
            fi
        done
    done
    shardarray=$(echo ${shardarray} | sed 's/ //g')
    if [[ ${shardarray} == ${newshardarray} ]]
    then
        info "Server is running successfully! Join and enjoy!"
    else
        if [[ ${newshardarray} == "TIME_OUT" ]]
        then
            error "MOD download timeout or port 10999/10998 in use"
        elif [[ ${newshardarray} == "BREAK" ]]
        then
            error "MOD or setting error!"
        elif [[ ${newshardarray} == "TOKENINVALID" ]]
        then
            error "CLUSTER TOKEN INVALID"
        else
            error "UNKOWN ERROR! FEEDBACK!"
        fi
    fi
}
#############################################################################
First_run_check(){
    if [ ! -f ${dst_server_dir}/version.txt ]
    then
        info "First run ... Installing and making configuration ... Please wait ..."
        Open_swap
        Mkdstdir
        Install_Dependency
        Install_Steamcmd
        info "Installing game server ..."
        Install_Game
        Fix_steamcmd
        if [ ! -f ${dst_server_dir}/version.txt ]
        then
            error "Game server can't install!" && exit 1
        fi
        info "All done! Choose number 1 to start!"
    fi
}
# open swap
Open_swap(){
    info "Crate system swap ..."
    sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
    sudo mkswap /swapfile
    sudo chmod 0600 /swapfile
    sudo swapon /swapfile
    sudo chmod 0666 /etc/fstab
    echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
    sudo chmod 0644 /etc/fstab
    info "System swap enabled!"
}
# 创建文件夹
Mkdstdir(){
    mkdir -p ${HOME}/steamcmd
    mkdir -p ${dst_server_dir}
    mkdir -p ${DST_conf_basedir}/${DST_conf_dirname}
    mkdir -p ${data_dir}
}
# 检查当前系统信息
Check_sys(){
    if [[ -f /etc/redhat-release ]]
    then
        release="centos"
    elif cat /etc/issue | grep -q -E -i "debian"
    then
        release="debian"
    elif cat /etc/issue | grep -q -E -i "ubuntu"
    then
        release="ubuntu"
    elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat"
    then
        release="centos"
    elif cat /proc/version | grep -q -E -i "debian"
    then
        release="debian"
    elif cat /proc/version | grep -q -E -i "ubuntu"
    then
        release="ubuntu"
    elif cat /proc/version | grep -q -E -i "centos|red hat|redhat"
    then
        release="centos"
    fi
    if [[ ${release} != "ubuntu" && ${release} != "debian" && ${release} != "centos" ]]
    then
        error "Sorry! Only surpport Debian7+/Ubuntu12+/CentOS7+ now!" && exit 1
    fi
    bit=`uname -m`
}
# 安装依赖库和必要软件
Install_Dependency(){
    info "Installing lib and apps ..."
    if [[ ${release} != "centos" ]]
    then
        if [[ ${bit} = "x86_64" ]]
        then
            sudo dpkg --add-architecture i386
                sudo apt update
                sudo apt install -y lib32gcc1 libstdc++6 libstdc++6:i386 libcurl4-gnutls-dev:i386 tmux wget lua5.2 git openssl libssl-dev
        else
            sudo apt update
            sudo apt install -y libstdc++6 libcurl4-gnutls-dev tmux wget lua5.2 git openssl libssl-dev
        fi
    else
        if [[ ${bit} = "x86_64" ]]
        then
            sudo yum install -y tmux glibc.i686 libstdc++ libstdc++.i686 libcurl.i686 wget lua5.2 git openssl openssl-devel
        else
            sudo yum install -y wget tmux libstdc++ libcurl lua5.2 git openssl openssl-devel
        fi
     fi
}
# Install steamcmd
Install_Steamcmd(){
    wget "https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz"
    tar -xzvf steamcmd_linux.tar.gz -C ${HOME}/steamcmd
    chmod +x ${HOME}/steamcmd/steamcmd.sh
    rm steamcmd_linux.tar.gz
}
# Install DST Dedicated Server
Install_Game(){
    cd ${HOME}/steamcmd || exit 1
    ./steamcmd.sh +login "anonymous" +force_install_dir "${dst_server_dir}" +app_update "343050" validate +quit
}
# 修复SteamCMD [S_API FAIL] SteamAPI_Init() failed;
Fix_steamcmd(){
    info "Fixed Steamcmd issue ..."
    mkdir -p "${HOME}/.steam/sdk32"
    cp -v ${HOME}/steamcmd/linux32/steamclient.so "${HOME}/.steam/sdk32/steamclient.so"
    # fix lib for centos
    if [[ ${release} == "centos" ]] && [ ! -f "${dst_server_dir}/bin/lib32/libcurl-gnutls.so.4" ]
    then
        info "libcurl-gnutls.so.4 missing ... create a lib link."
        ln -s "/usr/lib/libcurl.so.4" "${dst_server_dir}/bin/lib32/libcurl-gnutls.so.4"
    fi
}
##########################################################################
# Show change log
Show_changelog(){
    echo -e "\e[33m==============================Change log======================================\e[0m"
    #cat /tmp/dstscript/.dstscript/changelog.txt > /tmp/changelog.txt
    wget ${update_link}/.dstscript_en/changelog.txt -O /tmp/changelog.txt > /dev/null 2>&1
    datelog=$(cat /tmp/changelog.txt | head -n 1)
    cat /tmp/changelog.txt | grep -A 20 "updatelog ${datelog}"
    echo -e "\e[33m================================================================================\e[0m"
    sleep 3
}
# 脚本更新
Update_script(){
    info "Checking if the script update is available ... please wait ..."
    #if [ ! -d /tmp/dstscript ]
    #then
    #    git clone ${repo_link} /tmp/dstscript > /dev/null 2>&1
    #else
    #    cd /tmp/dstscript && git pull > /dev/null 2>&1 && cd
    #fi
    wget ${update_link}/.dstscript_en/filelist.txt -O /tmp/filelist.txt > /dev/null 2>&1
    #cat /tmp/dstscript/.dstscript/filelist.txt > /tmp/filelist.txt
    for file in $(cat /tmp/filelist.txt | cut -d ":" -f1)
    do
        new_ver=$(cat /tmp/filelist.txt | grep "${file}" | cut -d ":" -f2)
        if [[ "${file}" != "dstserver.sh_en" ]]
        then
            file=".dstscript_en/${file}"
        fi
        if [ -f ${HOME}/${file} ]
        then
            cur_ver=$(cat ${HOME}/${file} | grep "script_ver=" | head -n 1 | cut -d '"' -f2) >/dev/null 2>&1
        else
            cur_ver="000"
        fi
        if [[ "${file}" == "dstserver.sh_en" ]]
        then
            cur_ver=$script_ver
        fi
        [[ -z ${new_ver} ]] && new_ver=${cur_ver}
        if [[ ${new_ver} != ${cur_ver} ]]
        then
            info "${file}: new version available[${new_ver}]，updating ..."
            #cp -rf /tmp/dstscript/${file} ${HOME}/${file}
            wget ${update_link}/${file} -O ${HOME}/${file} > /dev/null 2>&1
            #chmod +x ${HOME}/dstserver.sh
            info "${file}: updated[${new_ver} ] !"
            if [[ "${file}" == "dstserver.sh_en" ]]
            then
                need_exit="true"
            fi
            if [[ ${file} == ".dstscript_en/updatelib.txt" ]]
            then
                #tip "${HOME}/dstserver.sh"
                #Install_Dependency >/dev/null 2>&1
                sed -i 's/false/true/g' $HOME/.dstscript_en/updatelib.txt
            fi
            need_update="true"
            mv ${HOME}/dstserver.sh_en ${HOME}/dstserver.sh
            chmod +x ${HOME}/dstserver.sh
        fi
    done
    if [[ "${need_update}" == "true" ]]
    then
        Show_changelog
    fi
    if [[ "${need_exit}" == "true" ]]
    then
        tmux kill-session -t Auto_update > /dev/null 2>&1
        tip "Due to script updated, auto update process exited."
        exit 0
    fi
}
# MOD update check
Update_DST_MOD_Check(){
    info "Checking if the mods enable are need to update ..."
    MOD_update="false"
    for modid in $(cat ${data_dir}/mods_setup.lua | grep "ServerModSetup" | cut -d '"' -f2)
    do
        mod_new_ver=$(curl -s "${my_api_link}/?type=mod&modid=${modid}" | sed 's/[ \t]*$//g')
        if [ -f ${dst_server_dir}/mods/workshop-${modid}/modinfo.lua ]
        then
            echo "fuc=\"getver\"" > ${data_dir}/modinfo.lua
            cat ${dst_server_dir}/mods/workshop-${modid}/modinfo.lua >> ${data_dir}/modinfo.lua
            cd ${data_dir}
            mod_cur_ver=$(lua modconf.lua)
        else
            mod_cur_ver=000
        fi
        if [[ ${mod_new_ver} != "" && ${mod_new_ver} != "" && ${mod_new_ver} != "nil" && ${mod_new_ver} != ${mod_new_ver} ]]
        then
            info "MOD(${modid}[${mod_new_ver} ==> ${mod_new_ver}]) update is available,rebooting to update ..."
            MOD_update="true"
            break
        else
            info "MOD(${modid}) update is not available!"
        fi
    done
}
Status_keep(){
    Get_shard_array
    for shard in $shardarray
    do
        if ! tmux has-session -t DST_${shard} > /dev/null 2>&1
        then
            server_alive=false
            break
        else
            server_alive=true
        fi
    done
    if [[ $(grep "serveropen" ${server_conf_file} | cut -d "=" -f2) == "true" &&  ${server_alive} == "false" ]]
    then
        tip "Something wrong, rebooting server ..."
        Reboot_server
    fi
}
Simple_server_status(){
    cluster="null"
    server_on=""
    [ -f ${server_conf_file} ] && Get_current_cluster
    Get_shard_array
    for shard in ${shardarray}
    do
        if tmux has-session -t DST_${shard} > /dev/null 2>&1
        then
            server_on="${server_on}${shard}"
        fi
    done
    if tmux has-session -t Auto_update > /dev/null 2>&1
    then
        auto_on="true"
    else
        auto_on="false"
    fi
    cluster_name="null"
    if [[ ${server_on} == "" ]]
    then
        server_on="null"
    fi
    [ -f ${dst_base_dir}/${cluster}/cluster.ini ] && cluster_name=$(cat ${dst_base_dir}/${cluster}/cluster.ini | grep "^cluster_name" | cut -d "=" -f2)
    echo -e "\e[33mCluster: ${cluster}   Server running：${server_on}   Server name: ${cluster_name}\e[0m"
    echo -e "\e[33mAuto update：${auto_on}\e[0m"
}
Fix_Net_hosts(){
    sudo chmod 666 /etc/hosts
    if ! grep steamusercontent-a.akamaihd.net /etc/hosts > /dev/null 2>&1
    then
        echo "72.246.103.17 steamusercontent-a.akamaihd.net" >> /etc/hosts
    fi
    if ! grep s3.amazonaws.com /etc/hosts > /dev/null 2>&1
    then
        echo "52.216.136.5 s3.amazonaws.com" >> /etc/hosts
    fi
    if ! grep steamcommunity.com /etc/hosts > /dev/null 2>&1
    then
        echo "23.222.167.249 steamcommunity.com" >> /etc/hosts
    fi
    sudo chmod 644 /etc/hosts
}
Update_MOD(){
    Get_current_cluster
    Setup_mod
    Update_DST_MOD_Check
    if [[ ${MOD_update} == "true" ]]
    then
        Download_MOD
    fi
}
Download_MOD(){
    info "Installing/Updating MOD new enabled，please wait ..."
    if [ ! -d ${dst_base_dir}/downloadmod/Master ]
    then
        mkdir -p ${dst_base_dir}/downloadmod/Master
    fi
    if tmux has-session -t DST_MODUPDATE > /dev/null 2>&1
    then
        tmux kill-session -t DST_MODUPDATE
    fi
    cd ${dst_server_dir}/bin || exit 1
    tmux new-session -s DST_MODUPDATE -d "${dst_bin_cmd} -cluster downloadmod -shard Master"
    sleep 5
    while (true)
    do
        if tmux has-session -t DST_MODUPDATE > /dev/null 2>&1
        then
            if [[ $(grep "Your Server Will Not Start" -c "${dst_base_dir}/downloadmod/Master/server_log.txt") > 0 ]]
            then
                info "Install/Update MOD new enabled done!"
                tmux kill-session -t DST_MODUPDATE
                break
            fi
        fi
    done
}
Get_IP(){
	ip=$(wget -qO- -t1 -T2 ipinfo.io/ip)
	if [[ -z "${ip}" ]]; then
		ip=$(wget -qO- -t1 -T2 api.ip.sb/ip)
		if [[ -z "${ip}" ]]; then
			ip=$(wget -qO- -t1 -T2 members.3322.org/dyndns/getip)
		fi
	fi
}
Post_ipmd5(){
    Get_IP
    send_str=$(echo -n ${ip} | openssl md5 | cut -d " " -f2)
    curl -s "${my_api_link}/?type=tongji&ipmd5string=${send_str}" > /dev/null 2>&1
    echo "$(date +%s)" > ${data_dir}/ipmd5.txt
}
# 仅发送md5值做统计，尊重隐私，周期内只发送一次，保证流畅性
Send_md5_ip(){
    if [ ! -f ${data_dir}/ipmd5.txt ]
    then
        Post_ipmd5
    else
        cur_time=$(date +%s)
        old_time=$(cat ${data_dir}/ipmd5.txt)
        cycle=$[ ${cur_time} - ${old_time} ]
        # 周期为七天
        if [ $cycle -gt 604800 ]
        then
            Post_ipmd5
        fi
    fi
}
####################################################################################
if [[ $1 == "au" ]]; then
    while (true)
    do
        echo -e "\e[33m============DST Dedicated Server Manager Script [Linux-Steam](${script_ver})============\e[0m"
        Update_DST
        Update_DST_MOD_Check
        if [[ ${MOD_update} == "true" ]]
        then
            Reboot_server
        fi
        Status_keep
        info "Checking per 30 minutes ..."
        sleep 1800
    done
fi
# 移动根目录到隐藏目录
if [ -d ${HOME}/dstscript ]
then
    mv ${HOME}/dstscript ${HOME}/.dstscript
fi
# 卸载重装
if [ ! -d ${data_dir} ]
then
    mkdir -p ${data_dir}
fi
# Global Settings
if [ ! -f $data_dir/global_settings.conf ]
then
    touch $data_dir/global_settings.conf
    echo "override_settings=true" >> $data_dir/global_settings.conf
    tip "Rewrite the locally uploaded archive to the script configuration format\n       is enabled. You can change it in Gloabal Setting."
    sleep 2
fi
# Run from here
Check_sys
First_run_check
#Fix_Net_hosts
Update_script
if [ $HOME/.dstscript_en/updatelib.txt ]
then
    if grep "true" $HOME/.dstscript_en/updatelib.txt >/dev/null 2>&1;
    then
        sed -i 's/true/false/g' $HOME/.dstscript_en/updatelib.txt
        Install_Dependency
    fi
fi
Update_DST_Check
Send_md5_ip
clear
Menu
